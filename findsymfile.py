#!/usr/bin/env python3

import mechanize as mechanize
from casase import casread
import numpy as np
import numpy.linalg as la

br = mechanize.Browser()
br.set_handle_robots(False)

"""
Example:

python3 findsymfile.py structure.cell lattol=0.001
"""

def findsym_wrap(filename, magnetic=False, print_cif=True, origin=2,
        lattol=1e-5, postol=1e-5, magtol=1e-5, axeso='abc', axesm='ab(c)',
        index=None, format=None, magmom_dir="z"):
    """
    Script for analysing structure files using findsym.

    Parameters:
    -----------
    filename: str
        The name of the ASE-readable file whose structure is to be read.

    magnetic: bool
        Determines whether to look at symmetry of magnetic space group if system is
        magnetic. Default: False

    print_cif: bool
       Determines whether a CIF file is to be written.

    origin: int
        Choice of origin: 1, 2 or 3. Default = 2.

    lattol: float
        Tolerance to which the symmetry operations are to be satisfied for the
        lattice parameters.

    postol: float
        Tolerance to which the symmetry operations are to be satisfied for the
        internal coordinates.

    magtol: float
        Tolerance to which the symmetry operations are to be satisfied for the
        magnetic moments (expressed in the cell basis).

    magmom_dir: str
        Direction in which the magnetic moments lie. The first character
        denotes whether it is ferro- (+) or antiferro- (-) magnetic.

    Returns:
    --------
    filename.cif: .cif file
        A CIF file generated by FINDSYM in the directory in which the
        executable was launched.

    SG_name, SG_number: str
        The space group name and number. If non-magnetic the Hermann-Mauguin
        symbols are used. For magnetic systems the BNS symbols are output.
    """
    #Print optional arguments
    print("magnetic: ", magnetic, "print_cif: ", print_cif)

    #Get structure attributes
    atoms = casread(filename)
    nAtoms = atoms.get_global_number_of_atoms()
    elems = ' '.join(atoms.get_chemical_symbols())
    cell = atoms.get_cell()
    latvecs = [' '.join([str(c) for c in cell[i, :]])+'\r\n' for i in range(3)]
    posns = atoms.get_scaled_positions()

    #Dealing with magnetic systems
    if magnetic:
        print("Treating this structure as magnetic.")
        #Define direction dictionary
        dir_dict = {"x": [1, 0, 0], "y": [0, 1, 0], "z": [0, 0, 1], "xy": \
                [1 / np.sqrt(2), 1 / np.sqrt(2), 0], "yz": [0, 1 / np.sqrt(2),\
                1 / np.sqrt(2)], "zx": [1 / np.sqrt(2), 0, 1 / np.sqrt(2)]}
        #Choose magnetic moment direction
        n = np.array(dir_dict[magmom_dir]) #Cartesian direction

        #Get magnitudes of magnetic moments
        spins = atoms.get_initial_magnetic_moments()

        #Get magnetic moment vectors relative to the lattice
        proj_spins = np.array([[spins[i]*np.dot(np.array(n), cell[j]) / \
        np.dot(cell[j], cell[j]) for j in range(3)] for i in range(nAtoms)])

        #Define array of fractional positions and magnetic moments
        posns_mag = np.zeros((nAtoms, 6))
        posns_mag[:, :3] = posns
        posns_mag[:, 3:] = proj_spins
        positions = [' '.join([str(p) for p in posns_mag[i, :]])+'\r\n'
                 for i in range(nAtoms)]
    else:
        positions = [' '.join([str(p) for p in posns[i, :]])+'\r\n'
                 for i in range(nAtoms)]
    #########################################################################
    print("Positions: ", positions)

    # Interacting with FINDSYM website
    br.open('http://stokes.byu.edu/iso/findsym.php')
    br.form = list(br.forms())[1]
    br['title'] = filename
    br['acclat'] = str(lattol)
    br['accpos'] = str(postol)
    br['axeso'] = [axeso]
    br['axesm'] = [axesm]
    br['vectors'] = ''.join(latvecs)
    br['atoms'] = str(nAtoms)
    br['types'] = elems
    br['origin'] = [str(origin)]
    br['accmag'] = str(magtol)
    br.find_control("magnetic").items[0].selected=magnetic

    br['positions'] = ''.join(positions)
    response = br.submit()
    cifstart = '# CIF file created by FINDSYM'
    cifend = '# end of cif'
    output = response.read().decode('utf-8')

    assert cifstart in output, "FINDSYM did not generate a CIF file."

    #Defining the .cif file generated by FINDSYM for this structure
    cifFile = output[output.index(cifstart):output.index(cifend)+len(cifend)]

    #Space group details
    cifLines = cifFile.splitlines()
    for _, line in enumerate(cifLines):
        #Treating magnetic or non-magnetic cases
        if magnetic:
            if '_space_group_magn.number_BNS' in line:
                SG_number = line.split(" ")[1]
            elif '_space_group_magn.name_BNS' in line:
                SG_name = line.split('"')[1]
        else:
            if '_symmetry_space_group_name_H-M "' in line:
                SG_name = line.split('"')[1]
            elif '_symmetry_Int_Tables_number' in line:
                SG_number = line.split(" ")[1]

    #Write .CIF file
    if print_cif:
        cifName = filename.replace(filename.split(".")[-1], "cif")
        with open(cifName, "w+") as CIF:
            CIF.write(cifFile)

    return SG_name, SG_number

if __name__ == '__main__':
    import sys
    filename = str(sys.argv[1])  # First argument is structure file

    args = {}
    if sys.argv[2:]:
        for arg in sys.argv[2:]:
            argsplit = arg.split('=')
            if len(argsplit) == 2:
                args[argsplit[0]] = argsplit[1]
            else:
                break

    SG_name, SG_number = findsym_wrap(filename, **args)
    print("Space group: ", SG_name, SG_number)
